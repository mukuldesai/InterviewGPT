{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 6, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"","debugId":null}},
    {"offset": {"line": 60, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/src/app/api/route.ts"],"sourcesContent":["import { NextResponse } from 'next/server';\n\n// Job Listing type\nexport interface JobListing {\n  job_id: string;\n  employer_name: string;\n  employer_logo?: string | null;\n  job_employment_type: string;\n  job_title: string;\n  job_description: string;\n  job_apply_link: string;\n  job_city: string;\n  job_country: string;\n  job_posted_at_timestamp: number;\n  job_min_salary?: number;\n  job_max_salary?: number;\n}\n\nexport async function GET(request: Request) {\n  const rapidApiKey = process.env.RAPID_API_KEY;\n  const rapidApiHost = 'jsearch.p.rapidapi.com';\n\n  if (!rapidApiKey) {\n    console.error('[Error] RAPID_API_KEY not set.');\n    return NextResponse.json(generateMockJobs(15), { status: 200 });\n  }\n\n  try {\n    const { searchParams } = new URL(request.url);\n    const query = searchParams.get('query') || 'software developer';\n    const location = searchParams.get('location') || '';\n    const experience = searchParams.get('experience');\n    const jobType = searchParams.get('jobType');\n    const datePosted = searchParams.get('datePosted');\n    const minSalary = searchParams.get('minSalary');\n\n    const queryParams = new URLSearchParams();\n    queryParams.append('query', `${query} ${location}`.trim());\n    if (experience) queryParams.append('experience', experience);\n    if (jobType) queryParams.append('employment_type', jobType);\n    if (datePosted) queryParams.append('date_posted', datePosted);\n    if (minSalary) queryParams.append('salary_min', minSalary);\n\n    const apiUrl = `https://${rapidApiHost}/search?${queryParams.toString()}`;\n\n    console.log(`[Jobs API] Fetching from: ${apiUrl}`);\n\n    const response = await fetch(apiUrl, {\n      method: 'GET',\n      headers: {\n        'X-RapidAPI-Key': rapidApiKey,\n        'X-RapidAPI-Host': rapidApiHost,\n      },\n      next: { revalidate: 3600 }, // cache for 1 hour\n    });\n\n    if (!response.ok) {\n      console.error(`[Jobs API] Request failed: ${response.status}`);\n      throw new Error(`API request failed with status ${response.status}`);\n    }\n\n    const data = await response.json();\n    console.log('[Jobs API] Data received:', data);\n\n    if (!data?.data || data.data.length === 0) {\n      console.warn('[Jobs API] No jobs found from API, returning mock jobs.');\n      return NextResponse.json(generateMockJobs(12), { status: 200 });\n    }\n\n    const jobListings: JobListing[] = data.data.map((item: any) => ({\n      job_id: item.job_id || `job-${Math.random().toString(36).substring(2, 9)}`,\n      employer_name: item.employer_name || 'Unknown Company',\n      employer_logo: item.employer_logo || null,\n      job_employment_type: item.job_employment_type || 'FULLTIME',\n      job_title: item.job_title || 'Job Position',\n      job_description: item.job_description || 'No description provided',\n      job_apply_link: item.job_apply_link || '#',\n      job_city: item.job_city || 'Remote',\n      job_country: item.job_country || 'United States',\n      job_posted_at_timestamp: item.job_posted_at_timestamp || Math.floor(Date.now() / 1000),\n      job_min_salary: item.job_min_salary || undefined,\n      job_max_salary: item.job_max_salary || undefined,\n    }));\n\n    return NextResponse.json(jobListings, { status: 200 });\n\n  } catch (error: any) {\n    console.error('[Jobs API] Error fetching job listings:', error.message || error); \n    return NextResponse.json(generateMockJobs(12), { status: 200 });\n  }\n}\n\n// Mock data generator for fallback\nfunction generateMockJobs(count: number): JobListing[] {\n  const jobTitles = [\n    'Software Engineer', 'Frontend Developer', 'Backend Developer',\n    'Full Stack Developer', 'DevOps Engineer', 'Data Scientist',\n    'Product Manager', 'UX Designer', 'QA Engineer', 'Project Manager'\n  ];\n\n  const companies = [\n    'Tech Innovations', 'Digital Solutions', 'CodeCraft',\n    'DataWorks', 'CloudScale', 'WebFusion', 'AppNexus',\n    'Software Systems', 'DevCorp', 'InnovateTech'\n  ];\n\n  const cities = [\n    { city: 'San Francisco', country: 'USA' },\n    { city: 'New York', country: 'USA' },\n    { city: 'Boston', country: 'USA' },\n    { city: 'Seattle', country: 'USA' },\n    { city: 'Austin', country: 'USA' },\n    { city: 'London', country: 'UK' },\n    { city: 'Toronto', country: 'Canada' },\n    { city: 'Berlin', country: 'Germany' }\n  ];\n\n  const employmentTypes = ['FULLTIME', 'PARTTIME', 'CONTRACTOR', 'INTERN'];\n\n  const descriptions = [\n    'Exciting opportunity to work with modern technologies.',\n    'Collaborate with cross-functional teams to deliver projects.',\n    'Join a company focused on innovation and growth.',\n    'Work with agile teams building next-gen applications.'\n  ];\n\n  const logos = [\n    'https://logo.clearbit.com/google.com',\n    'https://logo.clearbit.com/microsoft.com',\n    'https://logo.clearbit.com/amazon.com',\n    'https://logo.clearbit.com/apple.com',\n    'https://logo.clearbit.com/facebook.com',\n    null\n  ];\n\n  return Array.from({ length: count }, (_, i) => {\n    const location = cities[Math.floor(Math.random() * cities.length)];\n    const daysAgo = Math.floor(Math.random() * 14);\n    const postedTimestamp = Math.floor(Date.now() / 1000) - (daysAgo * 86400);\n\n    return {\n      job_id: `job-${i}-${Math.random().toString(36).substring(2, 9)}`,\n      employer_name: companies[Math.floor(Math.random() * companies.length)],\n      employer_logo: logos[Math.floor(Math.random() * logos.length)],\n      job_employment_type: employmentTypes[Math.floor(Math.random() * employmentTypes.length)],\n      job_title: jobTitles[Math.floor(Math.random() * jobTitles.length)],\n      job_description: descriptions[Math.floor(Math.random() * descriptions.length)],\n      job_apply_link: 'https://example.com/apply',\n      job_city: location.city,\n      job_country: location.country,\n      job_posted_at_timestamp: postedTimestamp,\n      job_min_salary: Math.floor(Math.random() * 50 + 50) * 1000,\n      job_max_salary: Math.floor(Math.random() * 50 + 100) * 1000,\n    };\n  });\n}\n"],"names":[],"mappings":"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","debugId":null}}]
}