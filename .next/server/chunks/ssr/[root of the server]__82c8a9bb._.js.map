{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 215, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/src/ai/ai-instance.ts"],"sourcesContent":["import {genkit} from 'genkit';\nimport {googleAI} from '@genkit-ai/googleai';\n\nexport const ai = genkit({\n  promptDir: './prompts',\n  plugins: [\n    googleAI({\n      apiKey: process.env.GOOGLE_GENAI_API_KEY,\n    }),\n  ],\n  model: 'googleai/gemini-2.0-flash',\n});\n"],"names":[],"mappings":";;;AAAA;AAAA;AACA;AAAA;;;AAEO,MAAM,KAAK,CAAA,GAAA,uIAAA,CAAA,SAAM,AAAD,EAAE;IACvB,WAAW;IACX,SAAS;QACP,CAAA,GAAA,2KAAA,CAAA,WAAQ,AAAD,EAAE;YACP,QAAQ,QAAQ,GAAG,CAAC,oBAAoB;QAC1C;KACD;IACD,OAAO;AACT","debugId":null}},
    {"offset": {"line": 239, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/src/ai/flows/generate-interview-questions.ts"],"sourcesContent":["'use server';\n/**\n * @fileOverview Generates role-specific interview questions based on user-selected job role and experience level.\n *\n * - generateInterviewQuestions - A function that generates interview questions.\n * - GenerateInterviewQuestionsInput - The input type for the generateInterviewQuestions function.\n * - GenerateInterviewQuestionsOutput - The return type for the GenerateInterviewQuestions function.\n */\n\nimport {ai} from '@/ai/ai-instance';\nimport {z} from 'genkit';\n\nconst GenerateInterviewQuestionsInputSchema = z.object({\n  jobRole: z.string().describe('The job role for which to generate interview questions.'),\n  experienceLevel: z.string().describe('The experience level of the candidate (e.g., Entry-level, Mid-level, Senior-level).'),\n  numQuestions: z.number().default(5).describe('The number of interview questions to generate.'),\n});\nexport type GenerateInterviewQuestionsInput = z.infer<typeof GenerateInterviewQuestionsInputSchema>;\n\nconst GenerateInterviewQuestionsOutputSchema = z.object({\n  questions: z.array(z.string()).describe('An array of generated interview questions.'),\n});\nexport type GenerateInterviewQuestionsOutput = z.infer<typeof GenerateInterviewQuestionsOutputSchema>;\n\nexport async function generateInterviewQuestions(input: GenerateInterviewQuestionsInput): Promise<GenerateInterviewQuestionsOutput> {\n  return generateInterviewQuestionsFlow(input);\n}\n\nconst prompt = ai.definePrompt({\n  name: 'generateInterviewQuestionsPrompt',\n  input: {\n    schema: z.object({\n      jobRole: z.string().describe('The job role for which to generate interview questions.'),\n      experienceLevel: z.string().describe('The experience level of the candidate (e.g., Entry-level, Mid-level, Senior-level).'),\n      numQuestions: z.number().default(5).describe('The number of interview questions to generate.'),\n    }),\n  },\n  output: {\n    schema: z.object({\n      questions: z.array(z.string()).describe('An array of generated interview questions.'),\n    }),\n  },\n  prompt: `You are an AI-powered interview question generator. You will generate {{numQuestions}} interview questions for the job role of {{jobRole}} and the experience level of {{experienceLevel}}. The generated questions should be role-specific and tailored to the experience level. Make sure not to give the same question twice.\n\nHere are the interview questions:\n{{#each (range 1 numQuestions)}}\n{{@index}}. {{../questions.[@index]}}\n{{/each}}`,\n});\n\nconst generateInterviewQuestionsFlow = ai.defineFlow<\n  typeof GenerateInterviewQuestionsInputSchema,\n  typeof GenerateInterviewQuestionsOutputSchema\n>({\n  name: 'generateInterviewQuestionsFlow',\n  inputSchema: GenerateInterviewQuestionsInputSchema,\n  outputSchema: GenerateInterviewQuestionsOutputSchema,\n}, async input => {\n  const numQuestions = input.numQuestions;\n  const {output} = await prompt({\n    ...input,\n    numQuestions: numQuestions,\n    questions: Array.from({ length: numQuestions }, (_, i) => `Question ${i + 1}`),\n  });\n\n  return {\n    questions: Array.from({ length: numQuestions }, (_, i) => output!.questions[i] || `Question ${i + 1}`),\n  };\n});\n"],"names":[],"mappings":";;;;;AACA;;;;;;CAMC,GAED;AACA;AAAA;;;;;;AAEA,MAAM,wCAAwC,uIAAA,CAAA,IAAC,CAAC,MAAM,CAAC;IACrD,SAAS,uIAAA,CAAA,IAAC,CAAC,MAAM,GAAG,QAAQ,CAAC;IAC7B,iBAAiB,uIAAA,CAAA,IAAC,CAAC,MAAM,GAAG,QAAQ,CAAC;IACrC,cAAc,uIAAA,CAAA,IAAC,CAAC,MAAM,GAAG,OAAO,CAAC,GAAG,QAAQ,CAAC;AAC/C;AAGA,MAAM,yCAAyC,uIAAA,CAAA,IAAC,CAAC,MAAM,CAAC;IACtD,WAAW,uIAAA,CAAA,IAAC,CAAC,KAAK,CAAC,uIAAA,CAAA,IAAC,CAAC,MAAM,IAAI,QAAQ,CAAC;AAC1C;AAGO,eAAe,uCAAwB,GAAxB,2BAA2B,KAAsC;IACrF,OAAO,+BAA+B;AACxC;AAEA,MAAM,SAAS,2HAAA,CAAA,KAAE,CAAC,YAAY,CAAC;IAC7B,MAAM;IACN,OAAO;QACL,QAAQ,uIAAA,CAAA,IAAC,CAAC,MAAM,CAAC;YACf,SAAS,uIAAA,CAAA,IAAC,CAAC,MAAM,GAAG,QAAQ,CAAC;YAC7B,iBAAiB,uIAAA,CAAA,IAAC,CAAC,MAAM,GAAG,QAAQ,CAAC;YACrC,cAAc,uIAAA,CAAA,IAAC,CAAC,MAAM,GAAG,OAAO,CAAC,GAAG,QAAQ,CAAC;QAC/C;IACF;IACA,QAAQ;QACN,QAAQ,uIAAA,CAAA,IAAC,CAAC,MAAM,CAAC;YACf,WAAW,uIAAA,CAAA,IAAC,CAAC,KAAK,CAAC,uIAAA,CAAA,IAAC,CAAC,MAAM,IAAI,QAAQ,CAAC;QAC1C;IACF;IACA,QAAQ,CAAC;;;;;SAKF,CAAC;AACV;AAEA,MAAM,iCAAiC,2HAAA,CAAA,KAAE,CAAC,UAAU,CAGlD;IACA,MAAM;IACN,aAAa;IACb,cAAc;AAChB,GAAG,OAAM;IACP,MAAM,eAAe,MAAM,YAAY;IACvC,MAAM,EAAC,MAAM,EAAC,GAAG,MAAM,OAAO;QAC5B,GAAG,KAAK;QACR,cAAc;QACd,WAAW,MAAM,IAAI,CAAC;YAAE,QAAQ;QAAa,GAAG,CAAC,GAAG,IAAM,CAAC,SAAS,EAAE,IAAI,GAAG;IAC/E;IAEA,OAAO;QACL,WAAW,MAAM,IAAI,CAAC;YAAE,QAAQ;QAAa,GAAG,CAAC,GAAG,IAAM,OAAQ,SAAS,CAAC,EAAE,IAAI,CAAC,SAAS,EAAE,IAAI,GAAG;IACvG;AACF;;;IA5CsB;;AAAA,+OAAA","debugId":null}},
    {"offset": {"line": 320, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/src/ai/flows/analyze-interview-response.ts"],"sourcesContent":["'use server';\n/**\n * @fileOverview An AI agent for analyzing interview responses.\n *\n * - analyzeInterviewResponse - A function that handles the interview response analysis process.\n * - AnalyzeInterviewResponseInput - The input type for the analyzeInterviewResponse function.\n * - AnalyzeInterviewResponseOutput - The return type for the analyzeInterviewResponse function.\n */\n\nimport {ai} from '@/ai/ai-instance';\nimport {z} from 'genkit';\n\nconst AnalyzeInterviewResponseInputSchema = z.object({\n  jobRole: z.string().describe('The job role the candidate is interviewing for.'),\n  experienceLevel: z.string().describe('The experience level of the candidate (e.g., Entry-level, Mid-level, Senior-level).'),\n  question: z.string().describe('The interview question asked.'),\n  answer: z.string().describe('The candidate\\'s answer to the interview question.'),\n});\nexport type AnalyzeInterviewResponseInput = z.infer<typeof AnalyzeInterviewResponseInputSchema>;\n\nconst AnalyzeInterviewResponseOutputSchema = z.object({\n  contentClarity: z.number().describe('A score (1-5) representing the clarity and relevance of the content.'),\n  technicalAccuracy: z.number().describe('A score (1-5) representing the technical accuracy of the answer.'),\n  confidence: z.number().describe('A score (1-5) representing the confidence and tone of the response.'),\n  structure: z.number().describe('A score (1-5) representing the behavioral structure (STAR format compliance) of the answer.'),\n  feedback: z.string().describe('Personalized, constructive feedback on how to improve the answer.'),\n});\nexport type AnalyzeInterviewResponseOutput = z.infer<typeof AnalyzeInterviewResponseOutputSchema>;\n\nexport async function analyzeInterviewResponse(input: AnalyzeInterviewResponseInput): Promise<AnalyzeInterviewResponseOutput> {\n  return analyzeInterviewResponseFlow(input);\n}\n\nconst prompt = ai.definePrompt({\n  name: 'analyzeInterviewResponsePrompt',\n  input: {\n    schema: z.object({\n      jobRole: z.string().describe('The job role the candidate is interviewing for.'),\n      experienceLevel: z.string().describe('The experience level of the candidate (e.g., Entry-level, Mid-level, Senior-level).'),\n      question: z.string().describe('The interview question asked.'),\n      answer: z.string().describe('The candidate\\'s answer to the interview question.'),\n    }),\n  },\n  output: {\n    schema: z.object({\n      contentClarity: z.number().describe('A score (1-5) representing the clarity and relevance of the content.'),\n      technicalAccuracy: z.number().describe('A score (1-5) representing the technical accuracy of the answer.'),\n      confidence: z.number().describe('A score (1-5) representing the confidence and tone of the response.'),\n      structure: z.number().describe('A score (1-5) representing the behavioral structure (STAR format compliance) of the answer.'),\n      feedback: z.string().describe('Personalized, constructive feedback on how to improve the answer.'),\n    }),\n  },\n  prompt: `You are an AI-powered interview coach. You will analyze the candidate's answer to the interview question and provide feedback.\n\n  Job Role: {{{jobRole}}}\n  Experience Level: {{{experienceLevel}}}\n  Question: {{{question}}}\n  Answer: {{{answer}}}\n\n  Evaluate the answer based on the following dimensions:\n  - Content clarity and relevance (contentClarity): How clear and relevant is the content to the question?\n  - Technical accuracy (technicalAccuracy): How accurate is the technical information provided in the answer?\n  - Confidence and tone (confidence): How confident and professional is the candidate's tone?\n  - Behavioral structure (structure): How well does the answer follow the STAR format (Situation, Task, Action, Result)?\n\n  Provide a numerical score (1-5) for each dimension and personalized, constructive feedback on how to improve the answer (feedback).\n  `,\n});\n\nconst analyzeInterviewResponseFlow = ai.defineFlow<\n  typeof AnalyzeInterviewResponseInputSchema,\n  typeof AnalyzeInterviewResponseOutputSchema\n>(\n  {\n    name: 'analyzeInterviewResponseFlow',\n    inputSchema: AnalyzeInterviewResponseInputSchema,\n    outputSchema: AnalyzeInterviewResponseOutputSchema,\n  },\n  async input => {\n    const {output} = await prompt(input);\n    return output!;\n  }\n);\n"],"names":[],"mappings":";;;;;AACA;;;;;;CAMC,GAED;AACA;AAAA;;;;;;AAEA,MAAM,sCAAsC,uIAAA,CAAA,IAAC,CAAC,MAAM,CAAC;IACnD,SAAS,uIAAA,CAAA,IAAC,CAAC,MAAM,GAAG,QAAQ,CAAC;IAC7B,iBAAiB,uIAAA,CAAA,IAAC,CAAC,MAAM,GAAG,QAAQ,CAAC;IACrC,UAAU,uIAAA,CAAA,IAAC,CAAC,MAAM,GAAG,QAAQ,CAAC;IAC9B,QAAQ,uIAAA,CAAA,IAAC,CAAC,MAAM,GAAG,QAAQ,CAAC;AAC9B;AAGA,MAAM,uCAAuC,uIAAA,CAAA,IAAC,CAAC,MAAM,CAAC;IACpD,gBAAgB,uIAAA,CAAA,IAAC,CAAC,MAAM,GAAG,QAAQ,CAAC;IACpC,mBAAmB,uIAAA,CAAA,IAAC,CAAC,MAAM,GAAG,QAAQ,CAAC;IACvC,YAAY,uIAAA,CAAA,IAAC,CAAC,MAAM,GAAG,QAAQ,CAAC;IAChC,WAAW,uIAAA,CAAA,IAAC,CAAC,MAAM,GAAG,QAAQ,CAAC;IAC/B,UAAU,uIAAA,CAAA,IAAC,CAAC,MAAM,GAAG,QAAQ,CAAC;AAChC;AAGO,eAAe,uCAAsB,GAAtB,yBAAyB,KAAoC;IACjF,OAAO,6BAA6B;AACtC;AAEA,MAAM,SAAS,2HAAA,CAAA,KAAE,CAAC,YAAY,CAAC;IAC7B,MAAM;IACN,OAAO;QACL,QAAQ,uIAAA,CAAA,IAAC,CAAC,MAAM,CAAC;YACf,SAAS,uIAAA,CAAA,IAAC,CAAC,MAAM,GAAG,QAAQ,CAAC;YAC7B,iBAAiB,uIAAA,CAAA,IAAC,CAAC,MAAM,GAAG,QAAQ,CAAC;YACrC,UAAU,uIAAA,CAAA,IAAC,CAAC,MAAM,GAAG,QAAQ,CAAC;YAC9B,QAAQ,uIAAA,CAAA,IAAC,CAAC,MAAM,GAAG,QAAQ,CAAC;QAC9B;IACF;IACA,QAAQ;QACN,QAAQ,uIAAA,CAAA,IAAC,CAAC,MAAM,CAAC;YACf,gBAAgB,uIAAA,CAAA,IAAC,CAAC,MAAM,GAAG,QAAQ,CAAC;YACpC,mBAAmB,uIAAA,CAAA,IAAC,CAAC,MAAM,GAAG,QAAQ,CAAC;YACvC,YAAY,uIAAA,CAAA,IAAC,CAAC,MAAM,GAAG,QAAQ,CAAC;YAChC,WAAW,uIAAA,CAAA,IAAC,CAAC,MAAM,GAAG,QAAQ,CAAC;YAC/B,UAAU,uIAAA,CAAA,IAAC,CAAC,MAAM,GAAG,QAAQ,CAAC;QAChC;IACF;IACA,QAAQ,CAAC;;;;;;;;;;;;;;EAcT,CAAC;AACH;AAEA,MAAM,+BAA+B,2HAAA,CAAA,KAAE,CAAC,UAAU,CAIhD;IACE,MAAM;IACN,aAAa;IACb,cAAc;AAChB,GACA,OAAM;IACJ,MAAM,EAAC,MAAM,EAAC,GAAG,MAAM,OAAO;IAC9B,OAAO;AACT;;;IApDoB;;AAAA,+OAAA","debugId":null}},
    {"offset": {"line": 409, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/src/ai/flows/analyze-voice-input.ts"],"sourcesContent":["// This file analyzes voice input, transcribing it and providing feedback on confidence levels and filler word usage.\n'use server';\n/**\n * @fileOverview Analyzes voice input for interview practice, providing transcription,\n * confidence level analysis, and filler word detection.\n *\n * - analyzeVoiceInput - A function that analyzes voice input.\n * - AnalyzeVoiceInputInput - The input type for the analyzeVoiceInput function.\n * - AnalyzeVoiceInputOutput - The return type for the analyzeVoiceInput function.\n */\n\nimport {ai} from '@/ai/ai-instance';\nimport {z} from 'genkit';\n\nconst AnalyzeVoiceInputInputSchema = z.object({\n  audioDataUri: z\n    .string()\n    .describe(\n      \"A audio file, as a data URI that must include a MIME type and use Base64 encoding. Expected format: 'data:<mimetype>;base64,<encoded_data>'.\"\n    ),\n});\nexport type AnalyzeVoiceInputInput = z.infer<typeof AnalyzeVoiceInputInputSchema>;\n\nconst AnalyzeVoiceInputOutputSchema = z.object({\n  transcription: z.string().describe('The transcription of the audio input.'),\n  confidenceLevel: z\n    .number()\n    .describe('A score (0-1) indicating the confidence level in the speech.'),\n  fillerWordCount: z\n    .number()\n    .describe('The number of filler words (e.g., um, ah) used in the speech.'),\n  feedback: z.string().describe('Feedback on the voice input.'),\n});\nexport type AnalyzeVoiceInputOutput = z.infer<typeof AnalyzeVoiceInputOutputSchema>;\n\nexport async function analyzeVoiceInput(input: AnalyzeVoiceInputInput): Promise<AnalyzeVoiceInputOutput> {\n  return analyzeVoiceInputFlow(input);\n}\n\nconst analyzeVoiceInputPrompt = ai.definePrompt({\n  name: 'analyzeVoiceInputPrompt',\n  input: {\n    schema: z.object({\n      audioDataUri: z\n        .string()\n        .describe(\n          \"A audio file, as a data URI that must include a MIME type and use Base64 encoding. Expected format: 'data:<mimetype>;base64,<encoded_data>'.\"\n        ),\n    }),\n  },\n  output: {\n    schema: z.object({\n      transcription: z.string().describe('The transcription of the audio input.'),\n      confidenceLevel: z\n        .number()\n        .describe('A score (0-1) indicating the confidence level in the speech.'),\n      fillerWordCount: z\n        .number()\n        .describe('The number of filler words (e.g., um, ah) used in the speech.'),\n      feedback: z.string().describe('Feedback on the voice input.'),\n    }),\n  },\n  prompt: `You are an AI voice analyst specializing in interview preparation.\n\nYou will be given an audio recording of a user's speech during a mock interview.\nYour task is to transcribe the speech, assess the speaker's confidence level, count the number of filler words used, and provide constructive feedback.\n\nAnalyze the following audio:\n\n{{media url=audioDataUri}}\n\nTranscription:\n{{output.transcription}}\n\nConfidence Level (0-1):\n{{output.confidenceLevel}}\n\nFiller Word Count:\n{{output.fillerWordCount}}\n\nFeedback:\n{{output.feedback}}`,\n});\n\nconst analyzeVoiceInputFlow = ai.defineFlow<\n  typeof AnalyzeVoiceInputInputSchema,\n  typeof AnalyzeVoiceInputOutputSchema\n>(\n  {\n    name: 'analyzeVoiceInputFlow',\n    inputSchema: AnalyzeVoiceInputInputSchema,\n    outputSchema: AnalyzeVoiceInputOutputSchema,\n  },\n  async input => {\n    const {output} = await analyzeVoiceInputPrompt(input);\n    return output!;\n  }\n);\n"],"names":[],"mappings":"AAAA,qHAAqH;;;;;;AAErH;;;;;;;CAOC,GAED;AACA;AAAA;;;;;;AAEA,MAAM,+BAA+B,uIAAA,CAAA,IAAC,CAAC,MAAM,CAAC;IAC5C,cAAc,uIAAA,CAAA,IAAC,CACZ,MAAM,GACN,QAAQ,CACP;AAEN;AAGA,MAAM,gCAAgC,uIAAA,CAAA,IAAC,CAAC,MAAM,CAAC;IAC7C,eAAe,uIAAA,CAAA,IAAC,CAAC,MAAM,GAAG,QAAQ,CAAC;IACnC,iBAAiB,uIAAA,CAAA,IAAC,CACf,MAAM,GACN,QAAQ,CAAC;IACZ,iBAAiB,uIAAA,CAAA,IAAC,CACf,MAAM,GACN,QAAQ,CAAC;IACZ,UAAU,uIAAA,CAAA,IAAC,CAAC,MAAM,GAAG,QAAQ,CAAC;AAChC;AAGO,eAAe,uCAAe,GAAf,kBAAkB,KAA6B;IACnE,OAAO,sBAAsB;AAC/B;AAEA,MAAM,0BAA0B,2HAAA,CAAA,KAAE,CAAC,YAAY,CAAC;IAC9C,MAAM;IACN,OAAO;QACL,QAAQ,uIAAA,CAAA,IAAC,CAAC,MAAM,CAAC;YACf,cAAc,uIAAA,CAAA,IAAC,CACZ,MAAM,GACN,QAAQ,CACP;QAEN;IACF;IACA,QAAQ;QACN,QAAQ,uIAAA,CAAA,IAAC,CAAC,MAAM,CAAC;YACf,eAAe,uIAAA,CAAA,IAAC,CAAC,MAAM,GAAG,QAAQ,CAAC;YACnC,iBAAiB,uIAAA,CAAA,IAAC,CACf,MAAM,GACN,QAAQ,CAAC;YACZ,iBAAiB,uIAAA,CAAA,IAAC,CACf,MAAM,GACN,QAAQ,CAAC;YACZ,UAAU,uIAAA,CAAA,IAAC,CAAC,MAAM,GAAG,QAAQ,CAAC;QAChC;IACF;IACA,QAAQ,CAAC;;;;;;;;;;;;;;;;;;;mBAmBQ,CAAC;AACpB;AAEA,MAAM,wBAAwB,2HAAA,CAAA,KAAE,CAAC,UAAU,CAIzC;IACE,MAAM;IACN,aAAa;IACb,cAAc;AAChB,GACA,OAAM;IACJ,MAAM,EAAC,MAAM,EAAC,GAAG,MAAM,wBAAwB;IAC/C,OAAO;AACT;;;IA7DoB;;AAAA,+OAAA","debugId":null}},
    {"offset": {"line": 497, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"","debugId":null}},
    {"offset": {"line": 558, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/src/app/interview/page.tsx/proxy.mjs"],"sourcesContent":["import { registerClientReference } from \"react-server-dom-turbopack/server.edge\";\nexport default registerClientReference(\n    function() { throw new Error(\"Attempted to call the default export of [project]/src/app/interview/page.tsx <module evaluation> from the server, but it's on the client. It's not possible to invoke a client function from the server, it can only be rendered as a Component or passed to props of a Client Component.\"); },\n    \"[project]/src/app/interview/page.tsx <module evaluation>\",\n    \"default\",\n);\n"],"names":[],"mappings":";;;AAAA;;uCACe,CAAA,GAAA,qPAAA,CAAA,0BAAuB,AAAD,EACjC;IAAa,MAAM,IAAI,MAAM;AAA8R,GAC3T,4DACA","debugId":null}},
    {"offset": {"line": 572, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/src/app/interview/page.tsx/proxy.mjs"],"sourcesContent":["import { registerClientReference } from \"react-server-dom-turbopack/server.edge\";\nexport default registerClientReference(\n    function() { throw new Error(\"Attempted to call the default export of [project]/src/app/interview/page.tsx from the server, but it's on the client. It's not possible to invoke a client function from the server, it can only be rendered as a Component or passed to props of a Client Component.\"); },\n    \"[project]/src/app/interview/page.tsx\",\n    \"default\",\n);\n"],"names":[],"mappings":";;;AAAA;;uCACe,CAAA,GAAA,qPAAA,CAAA,0BAAuB,AAAD,EACjC;IAAa,MAAM,IAAI,MAAM;AAA0Q,GACvS,wCACA","debugId":null}},
    {"offset": {"line": 586, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"","debugId":null}}]
}