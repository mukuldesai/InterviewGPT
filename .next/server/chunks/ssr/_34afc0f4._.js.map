{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 7, "column": 0}, "map": {"version":3,"sources":["file://D%3A/Study/Sem%204/ADS/Interview_GPT/src/app/actions/jobActions.ts"],"sourcesContent":["'use server';\n\n// Import the type definition from the API route\nimport { JobListing } from '../api/route';\n\ninterface JobsResponse {\n  jobs: JobListing[];\n  metadata: {\n    totalJobs: number;\n    totalPages: number;\n    currentPage: number;\n    pageSize: number;\n  };\n}\n\n// Server action to fetch job listings\nexport async function getJobListings(params: {\n  query: string;\n  location: string;\n  experience?: string;\n  jobType?: string[];\n  datePosted?: string;\n  minSalary?: number;\n  page?: number;\n  sortBy?: string;\n}): Promise<{ jobs: JobListing[], metadata: any }> {\n  try {\n    console.log('Server action called with params:', params);\n    \n    // Build the URL search parameters\n    const searchParams = new URLSearchParams();\n    \n    if (params.query) searchParams.append('query', params.query);\n    if (params.location) searchParams.append('location', params.location);\n    if (params.experience) searchParams.append('experience', params.experience);\n    if (params.jobType && params.jobType.length > 0) {\n      params.jobType.forEach(type => searchParams.append('jobType', type));\n    }\n    if (params.datePosted) searchParams.append('datePosted', params.datePosted);\n    if (params.minSalary) searchParams.append('minSalary', params.minSalary.toString());\n    if (params.page) searchParams.append('page', params.page.toString());\n    if (params.sortBy) searchParams.append('sortBy', params.sortBy);\n\n    // Use a relative URL for better compatibility\n    const apiUrl = `/api?${searchParams.toString()}`;\n    \n    console.log('Fetching jobs from API route:', apiUrl);\n\n    try {\n      const response = await fetch(apiUrl, {\n        method: 'GET',\n        headers: {\n          'Content-Type': 'application/json',\n        },\n        cache: 'no-store'\n      });\n\n      if (!response.ok) {\n        const errorText = await response.text();\n        console.error('API Error:', response.status, errorText);\n        \n        // Throw error to trigger fallback\n        throw new Error(`API Error: ${response.status}`);\n      }\n\n      const data = await response.json() as JobsResponse;\n      return data;\n    } catch (error) {\n      console.error('API request failed, falling back to direct mock data:', error);\n      // Fall back to importing and using mock data directly\n      const { filterJobs, mockJobListings } = await import('../mockdata/jobData');\n      \n      // Filter the mock data based on the search parameters\n      const filteredJobs = filterJobs({\n        query: params.query,\n        location: params.location,\n        experience: params.experience,\n        jobType: params.jobType,\n        datePosted: params.datePosted,\n        minSalary: params.minSalary,\n        page: params.page\n      });\n      \n      // Apply sorting if specified\n      let sortedJobs = [...filteredJobs];\n      if (params.sortBy === 'date') {\n        sortedJobs.sort((a, b) => b.job_posted_at_timestamp - a.job_posted_at_timestamp);\n      } else if (params.sortBy === 'salary') {\n        sortedJobs.sort((a, b) => {\n          const aMaxSalary = a.job_max_salary || a.job_min_salary || 0;\n          const bMaxSalary = b.job_max_salary || b.job_min_salary || 0;\n          return bMaxSalary - aMaxSalary;\n        });\n      }\n      \n      // Simulate pagination\n      const page = params.page || 1;\n      const pageSize = 10;\n      const start = (page - 1) * pageSize;\n      const end = start + pageSize;\n      const paginatedJobs = sortedJobs.slice(start, end);\n      \n      // Calculate total pages for the metadata\n      const totalJobs = filteredJobs.length;\n      const totalPages = Math.ceil(totalJobs / pageSize);\n      \n      console.log(`Direct mock data: returning ${paginatedJobs.length} mock jobs (filtered from ${totalJobs} total)`);\n      \n      // Return the mock data in the same format as the API\n      return {\n        jobs: paginatedJobs,\n        metadata: {\n          totalJobs,\n          totalPages,\n          currentPage: page,\n          pageSize\n        }\n      };\n    }\n  } catch (error) {\n    console.error('Error in getJobListings:', error);\n    // Return empty data structure in case of any error\n    return { \n      jobs: [], \n      metadata: {\n        totalJobs: 0,\n        totalPages: 1,\n        currentPage: 1,\n        pageSize: 10\n      }\n    };\n  }\n}\n\n// Export the JobListing type for use in other files\nexport type { JobListing };"],"names":[],"mappings":"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","debugId":null}},
    {"offset": {"line": 122, "column": 0}, "map": {"version":3,"sources":["file://D%3A/Study/Sem%204/ADS/Interview_GPT/.next-internal/server/app/jobs/page/actions.js%20%28server%20actions%20loader%29"],"sourcesContent":["export {getJobListings as '409f2fb22af33e92f243518b2eee1f47b0e9f1a4d5'} from 'ACTIONS_MODULE0'\n"],"names":[],"mappings":";AAAA","debugId":null}},
    {"offset": {"line": 174, "column": 0}, "map": {"version":3,"sources":["file://D%3A/Study/Sem%204/ADS/Interview_GPT/src/app/jobs/page.tsx/proxy.mjs"],"sourcesContent":["import { registerClientReference } from \"react-server-dom-turbopack/server.edge\";\nexport default registerClientReference(\n    function() { throw new Error(\"Attempted to call the default export of [project]/src/app/jobs/page.tsx <module evaluation> from the server, but it's on the client. It's not possible to invoke a client function from the server, it can only be rendered as a Component or passed to props of a Client Component.\"); },\n    \"[project]/src/app/jobs/page.tsx <module evaluation>\",\n    \"default\",\n);\n"],"names":[],"mappings":";;;AAAA;;uCACe,CAAA,GAAA,qPAAA,CAAA,0BAAuB,AAAD,EACjC;IAAa,MAAM,IAAI,MAAM;AAAyR,GACtT,uDACA","debugId":null}},
    {"offset": {"line": 188, "column": 0}, "map": {"version":3,"sources":["file://D%3A/Study/Sem%204/ADS/Interview_GPT/src/app/jobs/page.tsx/proxy.mjs"],"sourcesContent":["import { registerClientReference } from \"react-server-dom-turbopack/server.edge\";\nexport default registerClientReference(\n    function() { throw new Error(\"Attempted to call the default export of [project]/src/app/jobs/page.tsx from the server, but it's on the client. It's not possible to invoke a client function from the server, it can only be rendered as a Component or passed to props of a Client Component.\"); },\n    \"[project]/src/app/jobs/page.tsx\",\n    \"default\",\n);\n"],"names":[],"mappings":";;;AAAA;;uCACe,CAAA,GAAA,qPAAA,CAAA,0BAAuB,AAAD,EACjC;IAAa,MAAM,IAAI,MAAM;AAAqQ,GAClS,mCACA","debugId":null}},
    {"offset": {"line": 202, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"","debugId":null}}]
}